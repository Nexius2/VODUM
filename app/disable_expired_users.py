import sqlite3
from datetime import datetime
from logger import logger

from config import DATABASE_PATH
from tasks import update_task_status
from plex_share_helper import unshare_all_libraries

def disable_expired_users():
    # D√©but du traitement, log pour suivi
    logger.debug("üöÄ Script disable_expired_users lanc√©")
    logger.info("üîÅ D√©marrage de la d√©sactivation des utilisateurs expir√©s...")

    try:
        # Connexion √† la base SQLite
        conn = sqlite3.connect(DATABASE_PATH, timeout=10)
        cursor = conn.cursor()

        # V√©rifie si l‚Äôoption "d√©sactiver √† expiration" est activ√©e dans les param√®tres
        cursor.execute("SELECT disable_on_expiry FROM settings LIMIT 1")
        if not cursor.fetchone()[0]:
            logger.info("‚è∏Ô∏è Option 'disable_on_expiry' d√©sactiv√©e. (aucune action)")
            conn.close()
            update_task_status("disable_expired_users")  # Met √† jour le statut de la t√¢che (suivi)
            return

        # Recherche tous les utilisateurs (non admin) expir√©s qui ont des acc√®s √† des biblioth√®ques
        cursor.execute("""
            SELECT id, username, library_access
            FROM users
            WHERE expiration_date IS NOT NULL
              AND DATE(expiration_date) < DATE('now')
              AND is_admin = 0
              AND library_access IS NOT NULL
              AND library_access != ''
        """)
        expired_users = cursor.fetchall()

        if not expired_users:
            logger.info("‚úÖ Aucun utilisateur expir√© trouv√©.")
            conn.close()
            update_task_status("disable_expired_users")  # Rien √† faire, on sort
            return

        # Pour chaque utilisateur expir√© :
        for user_id, username, library_access in expired_users:
            logger.info(f"üõë D√©sactivation de {username} (ID {user_id})")

            # Si aucune info d‚Äôacc√®s, on log un warning et on saute
            if not library_access:
                logger.warning(f"‚ö†Ô∏è Aucun acc√®s enregistr√© dans 'library_access' pour {username}")
                continue

            # Convertit la liste d‚ÄôIDs des biblioth√®ques en tableau d‚ÄôIDs valides
            access_ids = [id.strip() for id in library_access.split(',') if id.strip().isdigit()]

            if not access_ids:
                logger.warning(f"‚ö†Ô∏è Aucun access_id valide dans library_access pour {username}")
                continue

            # Recherche les serveurs Plex associ√©s √† ces biblioth√®ques
            query = """
                SELECT DISTINCT s.server_id, s.name, s.plex_token, s.plex_url
                FROM libraries l
                JOIN servers s ON l.server_id = s.server_id
                WHERE l.section_id IN ({seq}) AND s.type = 'plex'
            """.format(seq=','.join(['?']*len(access_ids)))
            cursor.execute(query, tuple(access_ids))
            servers = cursor.fetchall()
            logger.info(f"[DEBUG SQL] Serveurs trouv√©s pour {username}: {servers}")

            if not servers:
                logger.warning(f"‚ùå Aucun serveur Plex associ√© pour {username} (section_ids : {access_ids})")
                continue

            # Pour chaque serveur, retire les acc√®s √† toutes les biblioth√®ques pour cet utilisateur
            for server_id, server_name, token, url in servers:
                logger.info(f"‚û°Ô∏è Suppression de tous les acc√®s pour {username} sur le serveur {server_name} ({url})")
                # Appel l‚ÄôAPI Plex pour d√©sactiver les acc√®s
                success = unshare_all_libraries(token, url, username)
                if success:
                    logger.info(f"‚úÖ Acc√®s supprim√© pour {username} sur {server_name}")
                else:
                    logger.warning(f"‚ö†Ô∏è √âchec de la d√©sactivation pour {username} sur {server_name}")

        # Met √† jour le statut de la t√¢che (dans la table de suivi)
        update_task_status("disable_expired_users")
        conn.close()

    except Exception as e:
        # En cas d‚Äôerreur, log d√©taill√© + met √† jour le statut d‚Äôerreur pour la t√¢che
        logger.exception(f"üö® Erreur g√©n√©rale : {e}")
        update_task_status("disable_expired_users", "error")

# Lance la fonction seulement si le script est ex√©cut√© en direct (et pas import√©)
if __name__ == "__main__":
    disable_expired_users()
